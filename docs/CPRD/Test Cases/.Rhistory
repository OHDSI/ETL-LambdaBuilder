library(CPRDtesting)
ibrary(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
DatabaseConnector::querySql(connection, SqlRender::renderSql("SELECT status, count(*) FROM @cdm_schema.test_results group by status", cdm_schema = cdm_schema)$sql)
fails <- DatabaseConnector::querySql(connection, SqlRender::renderSql("SELECT * FROM @cdm_schema.test_results", cdm_schema = cdm_schema)$sql)
View(fails)
library(CPRDtesting)
library(CPRDtesting)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
SqlRender::writeSql(insertSql, 'insertSql.sql')
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
DatabaseConnector::querySql(connection, SqlRender::renderSql("SELECT status, count(*) FROM @cdm_schema.test_results group by status", cdm_schema = cdm_schema)$sql)
fails <- DatabaseConnector::querySql(connection, SqlRender::renderSql("SELECT * FROM @cdm_schema.test_results", cdm_schema = cdm_schema)$sql)
View(fails)
add_clinical()
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
library(CPRDtesting)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
DatabaseConnector::querySql(connection, SqlRender::renderSql("SELECT status, count(*) FROM @cdm_schema.test_results group by status", cdm_schema = cdm_schema)$sql)
fails <- DatabaseConnector::querySql(connection, SqlRender::renderSql("SELECT * FROM @cdm_schema.test_results", cdm_schema = cdm_schema)$sql)
View(fails)
library(DataQualityDashboard)
DataQualityDashboard::viewDqDashboard("C:\Users\mblacke\Desktop\DQD\Optum\results_Optum Extended DOD (v1064).json")
DataQualityDashboard::viewDqDashboard("C:/Users/mblacke/Desktop/DQD/Optum/results_Optum Extended DOD (v1064).json")
DataQualityDashboard::viewDqDashboard("C:/Users/mblacke/Desktop/DQD/Optum/results_Optum_Extended_DOD_(v1064).json")
DataQualityDashboard::viewDqDashboard("C:/Users/mblacke/Desktop/DQD/Optum/results_Optum_Extended_DOD_(v1064).json")
library(CPRDtesting)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
testSql <- 'testSql.sql'
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
library(CPRDtesting)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
View(frameworkContext)
detach("package:CPRDTesting", unload=TRUE)
detach("package:CPRDtesting", unload=TRUE)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#cdmDatabaseSchema = strsplit(source_schema, '[.]')[[1]][1]
pw <- "wRgKw3R~=TJ2"
dbms <- "postgresql"
user <- "rhealth_cdm"
server <- "rds-aurora-pg-epidev.cluster-c9noqp7vjybh.us-east-1.rds.amazonaws.com/cdmtesting"
port <- 5432
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
cdm_schema
generateTestSql()
generateTestSql(databaseSchema = cdm_schema)
paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
testSql
connectionDetails$dbms
testSql <- paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
testSql
library(devtools)
install_github("ohdsi/SqlRender")
library(SqlRender)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
testSql <- paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")
SqlRender::writeSql(testSql, 'testSql.sql')
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
library(CPRDtesting)
testSql <- paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")
SqlRender::writeSql(testSql, 'testSql.sql')
library(CPRDtesting)
testSql <- paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")
SqlRender::writeSql(testSql, 'testSql.sql')
library(CPRDtesting)
testSql <- paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")
SqlRender::writeSql(testSql, 'testSql.sql')
config <- read.csv("inst\csv\config.csv")
config <- read.csv("inst/csv/config.csv")
View(config)
config$pw
config <- read.csv("inst/csv/config.csv", stringsAsFactors = FALSE)
config$pw
pw <- config$pw
dbms <- config$dbms
user <- config$rhealth
server <- config$rhealth
port <- config$port
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
connection <- DatabaseConnector::connect(connectionDetails)
config$server
pw <- config$pw
dbms <- config$dbms
user <- config$user
server <- config$server
port <- config$port
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = dbms,
server = server,
user = user,
password = pw,
port = port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
dbDisconnect()
disconnect()
DatabaseConnector::disconnect()
DatabaseConnector::disconnect(connection)
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = config$dbms,
server = config$server,
user = config$user,
password = config$pw,
port = config$port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
DatabaseConnector::disconnect(connection)
library(CPRDtesting)
library(CPRDtesting)

source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#create a config file with connection information to the testing database and schemas
config <- read.csv("inst/csv/config.csv", stringsAsFactors = FALSE)
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = config$dbms,
server = config$server,
user = config$user,
password = config$pw,
port = config$port
)

=======
#BUILD RAW DATA
#=============================

connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
consultation <- createConsultation()
source('C:/Users/mblacke/OneDrive - JNJ/JNJ CDM Process/CDM Updates 2020/Public/ETL-LambdaBuilder_dev/docs/CPRD/Test Cases/R/main.R')
consultation <- createConsultation()
source('C:/Users/mblacke/OneDrive - JNJ/JNJ CDM Process/CDM Updates 2020/Public/ETL-LambdaBuilder_dev/docs/CPRD/Test Cases/R/main.R')
consultation <- createConsultation()
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
library(CPRDtesting)
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
library(CPRDtesting)
library(CPRDtesting)
source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#create a config file with connection information to the testing database and schemas
config <- read.csv("inst/csv/config.csv", stringsAsFactors = FALSE)
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = config$dbms,
server = config$server,
user = config$user,
password = config$pw,
port = config$port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
library(CPRDtesting)

connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
library(CPRDtesting)
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
DatabaseConnector::executeSql(connection, testSql)
library(CPRDtesting)
library(CPRDtesting)
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)

source_schema <- "cprd_native_test"
cdm_schema <- "cprd_cdm_test"
#create a config file with connection information to the testing database and schemas
config <- read.csv("inst/csv/config.csv", stringsAsFactors = FALSE)
connectionDetails <- DatabaseConnector::createConnectionDetails(dbms = config$dbms,
server = config$server,
user = config$user,
password = config$pw,
port = config$port
)
#BUILD RAW DATA
#=============================
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)

DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
insertSql <- SqlRender::translate(SqlRender::render(paste(generateInsertSql(source_schema),
sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(insertSql, 'insertSql.sql')
DatabaseConnector::executeSql(connection, insertSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)
connection <- DatabaseConnector::connect(connectionDetails)
testSql <- SqlRender::translate(SqlRender::render(paste(generateTestSql(databaseSchema = cdm_schema), sep = "", collapse = "\n")),
targetDialect = connectionDetails$dbms)
SqlRender::writeSql(testSql, 'testSql.sql')
DatabaseConnector::executeSql(connection, testSql)

